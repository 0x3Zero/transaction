module Node.Scheduled declares *

export getPendingTransactions_5, getEventCron_30

import "node.aqua"
import "meta-contract.aqua"
import "fevm_json_rpc.aqua"

const ERC1155_ABI_URL = "https://ipfs.xfero.io/ipfs/QmSiZUtqkbEZPPFMN9ZihSbPskNxqkjBpAfB2NmwLv11N7?filename=CollaBeatNFT-abi.json"
const ERC721_ABI_URL = "https://ipfs.xfero.io/ipfs/QmWmkDbQ9KA6yLR8C8TuavLwyk2g6TfHyixG5gwTRem3Nw?filename=ERC721_0x3Zero-abi.json"

service MyOp("op"):
  array_length(results: []string) -> i64

service MyOp2("op"):
  array_length(results: []EventLogParamResult) -> i64

service MyOp3("op"):
  array_length(results: []Cron) -> i64
  
func validateTransaction(hash: string):
  on HOST_PEER_ID:
    tx <- Node.get_transaction(hash)

    if tx.transaction.method == "contract":
      Node.bind_meta_contract(hash)
    
    if tx.transaction.method == "metadata":
      metaContract <- Node.get_meta_contract_by_id(tx.transaction.meta_contract_id)
      if metaContract.success:
        metadatasResult <- Node.get_metadatas(tx.transaction.data_key, tx.transaction.version)
        MetaContract metaContract.meta.meta_contract_id
        metaContractResult <- MetaContract.on_execute(metaContract.meta, metadatasResult.metadatas, tx.transaction)
        Node.set_metadata(hash, metaContract.meta.meta_contract_id, metaContractResult.result, metaContractResult.metadatas, metaContractResult.error_string)

        -- if not main contract
        if metaContract.meta.token_key == "":
          if tx.transaction.token_key != "":
            metaContractToken <- Node.get_meta_contract(tx.transaction.token_key)
            if metaContractToken.success:
              metadatasTokenResult <- Node.get_metadatas_all_version(tx.transaction.data_key)
              MetaContract metaContractToken.meta.meta_contract_id
              metaContractTokenResult <- MetaContract.on_execute(metaContractToken.meta, metadatasTokenResult.metadatas, tx.transaction)
              Node.set_metadata(hash, metaContractToken.meta.meta_contract_id, metaContractTokenResult.result, metaContractTokenResult.metadatas, metaContractTokenResult.error_string)

    if tx.transaction.method == "cron":
      Node.set_cron(hash)

func getPendingTransactions_5():
  on HOST_PEER_ID:
    result <- Node.get_pending_transactions()

    if result.success:
      for tx <- result.transactions:
        validateTransaction(tx.hash)

func getEventCron_30():
  on HOST_PEER_ID:
    results <- Node.get_active_crons()

    cron_datas: *Cron

    if results.success:  
      cron_length <- MyOp3.array_length(results.crons)

      for result <- results.crons par:
        cron_datas <<- result
        from_block = Node.get_cron_latest_block(result.hash)
        from_block_hex = FevmJsonRpc.decimal_to_hex(from_block)

        evm_logs: *[]EventLogParamResult
        
        if result.token_type == "erc1155":
          if result.abi_url != "":
            evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, result.abi_url, from_block_hex, "latest", result.address, [result.topic])
          else:
            evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, ERC1155_ABI_URL, from_block_hex, "latest", result.address, [result.topic])
        if result.token_type == "erc721":
          if result.abi_url != "":
            evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, result.abi_url, from_block_hex, "latest", result.address, [result.topic])
          else:
            evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, ERC721_ABI_URL, from_block_hex, "latest", result.address, [result.topic])

        for log <- evm_logs:
          datas: *EventLogParamResult

          n <- MyOp2.array_length(log)
          for llog <- log par:
            -- address, token_id, data
            log_data = Node.deserialize_fork(llog.data)
            if log_data.data != "":
              if log_data.data != "00":
                forks = FevmJsonRpc.decode_abi(["string", "bytes"], log_data.data)

                -- parsing Minted event log (data_key/empty, data)
                if MyOp.array_length(forks) == 2:
                  blockContract = Node.get_meta_contract_by_id(result.meta_contract_id)
                  dataKey = Node.generate_data_key(result.chain, result.address, log_data.token_id)

                  if blockContract.success:
                    MetaContract blockContract.meta.meta_contract_id
                    -- call block contract 1st
                    meta_result = MetaContract.on_mint(blockContract.meta, dataKey, log_data.token_id, forks[1])

                    if meta_result.result:
                      resultMetadataCron = Node.set_metadata_cron(blockContract.meta, result, log_data.token_id, meta_result.result, meta_result.metadatas)
                      resultCronTx = Node.send_cron_tx(result.hash, llog.data, llog.block_number, llog.transaction_hash, log_data.token_id)

                      mainContract = Node.get_meta_contract(result.token_key)

                      if mainContract.success:
                        MetaContract mainContract.meta.meta_contract_id
                        -- call main contract after block contract
                        mainblock_result = MetaContract.on_mint(mainContract.meta, dataKey, log_data.token_id, forks[1])

                        if mainblock_result.result:
                          resultMetadataCronMain = Node.set_metadata_cron(mainContract.meta, result, log_data.token_id, mainblock_result.result, mainblock_result.metadatas)
                          resultCronTxMain = Node.send_cron_tx(result.hash, llog.data, llog.block_number, llog.transaction_hash, log_data.token_id)

              datas <<- llog
          join datas[n-1]
      join cron_datas[cron_length-1]