import "node.aqua"
import "meta-contract.aqua"
import "fevm_json_rpc.aqua"

const NODE_SERVICE_ID = "transaction"
const CONTRACT_SERVICE_ID = "8755a3a2-7e91-4e9e-8885-53955e927ebe"
const ERC1155_ABI_URL = "https://ipfs.xfero.io/ipfs/QmSiZUtqkbEZPPFMN9ZihSbPskNxqkjBpAfB2NmwLv11N7?filename=CollaBeatNFT-abi.json"
const ERC721_ABI_URL = "https://ipfs.io/ipfs/QmWmkDbQ9KA6yLR8C8TuavLwyk2g6TfHyixG5gwTRem3Nw?filename=ERC721_0x3Zero-abi.json"

service MyOp("op"):
  array_length(results: []string) -> i64

service MyOp2("op"):
  array_length(results: []EventLogParamResult) -> i64

data EvmLogParam:
  to: string
  token_id: string
  data: string

func validateTransaction(hash: string):
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    tx <- Node.get_transaction(hash)

    if tx.transaction.method == "contract":
      Node.bind_meta_contract(hash)
    
    if tx.transaction.method == "metadata":
      metaContract <- Node.get_meta_contract(tx.transaction.token_key)
      if metaContract.success:
        metadatasResult <- Node.get_metadatas(tx.transaction.data_key)
        MetaContract metaContract.meta.meta_contract_id
        metaContractResult <- MetaContract.on_execute(metaContract.meta, metadatasResult.metadatas, tx.transaction)
        Node.set_metadata(hash, metaContract.meta.meta_contract_id, metaContractResult.result, metaContractResult.metadatas, metaContractResult.error_string)

    if tx.transaction.method == "cron":
      Node.set_cron(hash, tx.transaction.data)

func getPendingTransactions_3600():
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_pending_transactions()

    if result.success:
      for tx <- result.transactions:
        validateTransaction(tx.hash)

func new_transaction_metadata(msg: string, count: i64):
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    Node.send_transaction("1", "11", "", "", "0xc20de1a30487ec70fc730866f297f2e2f1e411f7", "0x9239334cca0d0c7e4eb424fa4604f2c3f6d16c34b466f27ddad0a00fd4f11b581fecf9dc82f6e20e14a2977dcf80d1b72dcbb6592b46977f72afb976e34f9d7e1b", msg, "metadata", count)

func new_transaction_contract(count: i64) -> FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    rst <- Node.send_transaction("", "11", "", "", "0xc20de1a30487ec70fc730866f297f2e2f1e411f7", "0x8c340c30d899d341822136114959f3fd489b8a663ee3fea95948ddccfa54e42d25607b13b1237bf40a9ad02be297c62b34140b76efcab7779d4fe209cc12a0ab1c", "6fd948fa-35ef-4a96-9b21-5cff6c4db4ac", "contract", count)
  <- rst

func new_transaction_cron(data: string, count: i64) -> FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    rst <- Node.send_transaction("", "", "", "", "0xc20de1a30487ec70fc730866f297f2e2f1e411f7", "0x595b250aecd5c7df78bde997cdef9e757701194b1260535f5e48801d1125956a69ad10e1344970ba7596b47ee879749cca71734e7dcb60ad1dfa7fac830f35831b", data, "cron", count)
  <- rst

func pending_txs() -> FdbTransactionsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_pending_transactions()
  <- result

func processCron():
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    results <- Node.get_active_crons()

    evm_logs: *[]EventLogParamResult
    meta_contract_result: *MetaContractResult

    if results.success:  
      for result <- results.crons:
        from_block = Node.get_cron_tx_latest_block(result.address, result.chain, result.topic)
        from_block_hex = FevmJsonRpc.decimal_to_hex(from_block)
        if result.token_type == "erc1155":
          evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, ERC1155_ABI_URL, from_block_hex, "latest", result.address, [result.topic])
        if result.token_type == "erc721":
          evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, ERC721_ABI_URL, from_block_hex, "latest", result.address, [result.topic])

        for log <- evm_logs:
          datas: *EventLogParamResult

          n <- MyOp2.array_length(log)
          for llog <- log par:
            log_data = Node.deserialize_fork(llog.data)
            if log_data.data != "":
              forks = FevmJsonRpc.decode_abi(["string", "bytes"], log_data.data)

              -- parsing Minted event log (data_key, data)
              if MyOp.array_length(forks) == 2:
                metaContract <- Node.get_meta_contract_by_id(result.meta_contract_id)
                MetaContract metaContract.meta.meta_contract_id
                meta_result <- MetaContract.on_mint(metaContract.meta, log_data.token_id, forks[1])

                if meta_result.result:
                  Node.set_metadata_cron(forks[0], meta_result.result, meta_result.metadatas)
                  Node.send_cron_tx(result.cron_id, forks[0], llog.data, llog.block_number, llog.transaction_hash, log_data.token_id)
            datas <<- llog
          join datas[n-1]

func send_cron_tx(cron_id: i64) -> FdbCronTxResult:
  
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID

    result <- Node.send_cron_tx(cron_id, "123", "data", 0, "0x0", "1")
  <- result

func get_cron_tx_latest_block() -> u64:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_cron_tx_latest_block("0x0B5EEE15C8E1432E5BFE25C7fB2741144fb4aA58", "80001", "0x957f358702a4cd1c866fb29aefe080a9a56303adf02d47a081a56707d2d30033")
  <- result

func get_all_cron_txs() -> FdbCronTxsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_all_cron_txs()
  <- result
      